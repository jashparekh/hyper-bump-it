{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hyper Bump It - 0.1.0 A version bumping tool. hyper-bump-it 's features include: Updating the version to a new fully specified value Increasing the version base on a specific version part Optional Git integrations: Commit changes Create a new branch or tag Push changes to a remote repository Customizable search and replacement patterns Safe by default, but can be overridden: Request confirmation before editing files Explicit configuration need to push changes Won't run if there are unstaged changes TOML configuration file (can be part of pyproject.toml ) Examples This first example Updates to an explicit new version Updates multiple files that had lines matching the search pattern Commits those changes to a newly created branch $ hyper-bump-it to 2.3.4 Create branch bump_version_to_2.3.4 Switch to branch bump_version_to_2.3.4 Updating version in configuration file Update files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 example/foo.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2: - --1.2.3--abc 2: + --2.3.4--abc 6: - --1.2.3--edf 6: + --2.3.4--edf \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 example/bar.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2: - more --1.2.3-- text 2: + more --2.3.4-- text Commit changes: Bump version: 1.2.3 \u2192 2.3.4 Switch to branch main Do you want to perform these actions? [y/n] (n): y Creating branch bump_version_to_2.3.4 Switching to branch bump_version_to_2.3.4 Updating version in configuration file Update files Updating example/foo.txt Updating example/bar.txt Committing changes: Bump version: 1.2.3 \u2192 2.3.4 Switching to branch main This second example Updates to the next minor version Updates multiple files that had lines matching the search pattern Commits those changes, tags the new commit, and pushes the changes to the remote repository $ hyper-bump-it by minor Updating version in configuration file Update files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 example/foo.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2: - --1.2.3--abc 2: + --1.3.0--abc 6: - --1.2.3--edf 6: + --1.3.0--edf \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 example/bar.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2: - more --1.2.3-- text 2: + more --1.3.0-- text Commit changes: Bump version: 1.2.3 \u2192 1.3.0 Tag commit: v1.3.0 Pushing commit with tag v1.3.0 Do you want to perform these actions? [y/n] (n): y Updating version in configuration file Update files Updating example/foo.txt Updating example/bar.txt Committing changes: Bump version: 1.2.3 \u2192 1.3.0 Tagging commit: v1.3.0 Pushing commit with tag v1.3.0","title":"Overview"},{"location":"#hyper-bump-it-010","text":"A version bumping tool. hyper-bump-it 's features include: Updating the version to a new fully specified value Increasing the version base on a specific version part Optional Git integrations: Commit changes Create a new branch or tag Push changes to a remote repository Customizable search and replacement patterns Safe by default, but can be overridden: Request confirmation before editing files Explicit configuration need to push changes Won't run if there are unstaged changes TOML configuration file (can be part of pyproject.toml )","title":"Hyper Bump It - 0.1.0"},{"location":"#examples","text":"This first example Updates to an explicit new version Updates multiple files that had lines matching the search pattern Commits those changes to a newly created branch $ hyper-bump-it to 2.3.4 Create branch bump_version_to_2.3.4 Switch to branch bump_version_to_2.3.4 Updating version in configuration file Update files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 example/foo.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2: - --1.2.3--abc 2: + --2.3.4--abc 6: - --1.2.3--edf 6: + --2.3.4--edf \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 example/bar.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2: - more --1.2.3-- text 2: + more --2.3.4-- text Commit changes: Bump version: 1.2.3 \u2192 2.3.4 Switch to branch main Do you want to perform these actions? [y/n] (n): y Creating branch bump_version_to_2.3.4 Switching to branch bump_version_to_2.3.4 Updating version in configuration file Update files Updating example/foo.txt Updating example/bar.txt Committing changes: Bump version: 1.2.3 \u2192 2.3.4 Switching to branch main This second example Updates to the next minor version Updates multiple files that had lines matching the search pattern Commits those changes, tags the new commit, and pushes the changes to the remote repository $ hyper-bump-it by minor Updating version in configuration file Update files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 example/foo.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2: - --1.2.3--abc 2: + --1.3.0--abc 6: - --1.2.3--edf 6: + --1.3.0--edf \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 example/bar.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2: - more --1.2.3-- text 2: + more --1.3.0-- text Commit changes: Bump version: 1.2.3 \u2192 1.3.0 Tag commit: v1.3.0 Pushing commit with tag v1.3.0 Do you want to perform these actions? [y/n] (n): y Updating version in configuration file Update files Updating example/foo.txt Updating example/bar.txt Committing changes: Bump version: 1.2.3 \u2192 1.3.0 Tagging commit: v1.3.0 Pushing commit with tag v1.3.0","title":"Examples"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [Unreleased] Added Controls related to the interactive confirmation prompt show_confirm_prompt in configuration file can explicitly enable (default) or disable the prompt. -y & --yes as command line options to disable the prompt. --interactive as command line options to explicitly enable the prompt. -n & --no command line options as aliases for --dry-run . Command line command to initialize a project. Name of remote repository to displayed description for push action. Support for rich v13.x. Fixed Crash when executing against a repository without any commits. A clear error message is displayed instead. Unclear text displayed for proposed execution plan description when compared to text displayed when executing the plan. [0.1.0] - 2022-12-16 First functional release [0.0.1] - 2022-10-26 Initial Release (not functional yet)","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#added","text":"Controls related to the interactive confirmation prompt show_confirm_prompt in configuration file can explicitly enable (default) or disable the prompt. -y & --yes as command line options to disable the prompt. --interactive as command line options to explicitly enable the prompt. -n & --no command line options as aliases for --dry-run . Command line command to initialize a project. Name of remote repository to displayed description for push action. Support for rich v13.x.","title":"Added"},{"location":"changelog/#fixed","text":"Crash when executing against a repository without any commits. A clear error message is displayed instead. Unclear text displayed for proposed execution plan description when compared to text displayed when executing the plan.","title":"Fixed"},{"location":"changelog/#010-2022-12-16","text":"First functional release","title":"[0.1.0] - 2022-12-16"},{"location":"changelog/#001-2022-10-26","text":"Initial Release (not functional yet)","title":"[0.0.1] - 2022-10-26"},{"location":"getting-started/","text":"Getting Started Installation To install hyper-bump-it , simply run this simple command in your terminal of choice: python -m pip install hyper-bump-it Initial Setup Before hyper-bump-it can do any work, it needs to be configured. This configuration allows it to know which files should be operated on and how. A simple config file named hyper-bump-it.toml can be seen below: 1 2 3 4 5 6 [hyper-bump-it] current_version = \"1.2.3\" [[hyper-bump-it.files]] file_glob = \"version.txt\" search_format_pattern = \"version=\\\"{version}\\\"\" Line 2: Specifies the current version of the project being configured. Edit this value to match the version for the latest release of the project. Line 4-6: Define a single file definition. Line 5: Specifies the name of a file to be updated. Line 6: Specifies the text to look for in that file and replace with the new version. Automated Initialization To help users start using hyper-bump-it for the first time, the init command is provided to help initialize the configuration file. The default mode of operation for this command is to show a series of interactive prompts that will allow for fully customizing the configuration. There is an alternate mode accessed by providing the --non-interactive option. This will write out the configuration based only on values specified with command line options. The following shows the most basic form of this mode. hyper-bump-it.toml pyproject.toml By default, hyper-bump-it will write out the dedicated configuration file. $ hyper-bump-it init --non-interactive 1.2.3 Non-interactive mode: A sample configuration will be written that will need manual edits. $ cat hyper-bump-it.toml [hyper-bump-it] current_version = \"1.2.3\" [[hyper-bump-it.files]] file_glob = \"version.txt\" With the --pyproject argument hyper-bump-it will the configuration to pyproject.toml . If the file contains other configurations, those will be retained. $ hyper-bump-it init --non-interactive --pyproject 1.2.3 Non-interactive mode: A sample configuration will be written that will need manual edits. $ cat hyper-bump-it.toml [tool.other] foo = \"hello world\" [tool.hyper-bump-it] current_version = \"1.2.3\" [[tool.hyper-bump-it.files]] file_glob = \"version.txt\" There are many more options that can be used to further customize the configuration, when using this mode. hyper-bump-it init --help will show the options not covered here. Tip See the configuration page for how to utilize pyproject.toml instead of a dedicated configuration file. Example Executions Using the configuration shown above, lets see how hyper-bump-it runs. hyper-bump-it to 2.3.4 Updating version in configuration file Update files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 version.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2: - version=\"1.3.0\" 2: + version=\"2.3.4\" Commit changes: Bump version: 1.3.0 \u2192 2.3.4 Do you want to perform these actions? [y/n] (n): y Updating version in configuration file Update files Updating version.txt Committing changes: Bump version: 1.3.0 \u2192 2.3.4 hyper-bump-it finds the file with the version text and displays the changes it plans to make. After the user confirms the change, the program continues with editing the files. Included in the execution plan is committing the changes to the local git checkout. The example configuration file did not specify any specific options, so hyper-bump-it defaulted to simply committing the changes. In addition to updating the version to a specific value, hyper-bump-it can also do version increments. The following example show hyper-bump-it updating the version, from the original state, to the next minor version. hyper-bump-it by minor Updating version in configuration file Update files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 version.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2: - version=\"1.3.0\" 2: + version=\"1.4.0\" Commit changes: Bump version: 1.3.0 \u2192 1.4.0 Do you want to perform these actions? [y/n] (n): y Updating version in configuration file Update files Updating version.txt Committing changes: Bump version: 1.3.0 \u2192 .1.4.0 What's Next? Read about all the configuration options for a more detailed description of how to get hyper-bump-it to work best for a specific project. Read about how hyper-bump-it can integrate with git to learn more about how to automate things like creating a branch, pushing a change, and creating a tag. Read about how format patterns can be used to customize how text is matched and updated.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"To install hyper-bump-it , simply run this simple command in your terminal of choice: python -m pip install hyper-bump-it","title":"Installation"},{"location":"getting-started/#initial-setup","text":"Before hyper-bump-it can do any work, it needs to be configured. This configuration allows it to know which files should be operated on and how. A simple config file named hyper-bump-it.toml can be seen below: 1 2 3 4 5 6 [hyper-bump-it] current_version = \"1.2.3\" [[hyper-bump-it.files]] file_glob = \"version.txt\" search_format_pattern = \"version=\\\"{version}\\\"\" Line 2: Specifies the current version of the project being configured. Edit this value to match the version for the latest release of the project. Line 4-6: Define a single file definition. Line 5: Specifies the name of a file to be updated. Line 6: Specifies the text to look for in that file and replace with the new version.","title":"Initial Setup"},{"location":"getting-started/#automated-initialization","text":"To help users start using hyper-bump-it for the first time, the init command is provided to help initialize the configuration file. The default mode of operation for this command is to show a series of interactive prompts that will allow for fully customizing the configuration. There is an alternate mode accessed by providing the --non-interactive option. This will write out the configuration based only on values specified with command line options. The following shows the most basic form of this mode. hyper-bump-it.toml pyproject.toml By default, hyper-bump-it will write out the dedicated configuration file. $ hyper-bump-it init --non-interactive 1.2.3 Non-interactive mode: A sample configuration will be written that will need manual edits. $ cat hyper-bump-it.toml [hyper-bump-it] current_version = \"1.2.3\" [[hyper-bump-it.files]] file_glob = \"version.txt\" With the --pyproject argument hyper-bump-it will the configuration to pyproject.toml . If the file contains other configurations, those will be retained. $ hyper-bump-it init --non-interactive --pyproject 1.2.3 Non-interactive mode: A sample configuration will be written that will need manual edits. $ cat hyper-bump-it.toml [tool.other] foo = \"hello world\" [tool.hyper-bump-it] current_version = \"1.2.3\" [[tool.hyper-bump-it.files]] file_glob = \"version.txt\" There are many more options that can be used to further customize the configuration, when using this mode. hyper-bump-it init --help will show the options not covered here. Tip See the configuration page for how to utilize pyproject.toml instead of a dedicated configuration file.","title":"Automated Initialization"},{"location":"getting-started/#example-executions","text":"Using the configuration shown above, lets see how hyper-bump-it runs. hyper-bump-it to 2.3.4 Updating version in configuration file Update files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 version.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2: - version=\"1.3.0\" 2: + version=\"2.3.4\" Commit changes: Bump version: 1.3.0 \u2192 2.3.4 Do you want to perform these actions? [y/n] (n): y Updating version in configuration file Update files Updating version.txt Committing changes: Bump version: 1.3.0 \u2192 2.3.4 hyper-bump-it finds the file with the version text and displays the changes it plans to make. After the user confirms the change, the program continues with editing the files. Included in the execution plan is committing the changes to the local git checkout. The example configuration file did not specify any specific options, so hyper-bump-it defaulted to simply committing the changes. In addition to updating the version to a specific value, hyper-bump-it can also do version increments. The following example show hyper-bump-it updating the version, from the original state, to the next minor version. hyper-bump-it by minor Updating version in configuration file Update files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 version.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2: - version=\"1.3.0\" 2: + version=\"1.4.0\" Commit changes: Bump version: 1.3.0 \u2192 1.4.0 Do you want to perform these actions? [y/n] (n): y Updating version in configuration file Update files Updating version.txt Committing changes: Bump version: 1.3.0 \u2192 .1.4.0","title":"Example Executions"},{"location":"getting-started/#whats-next","text":"Read about all the configuration options for a more detailed description of how to get hyper-bump-it to work best for a specific project. Read about how hyper-bump-it can integrate with git to learn more about how to automate things like creating a branch, pushing a change, and creating a tag. Read about how format patterns can be used to customize how text is matched and updated.","title":"What's Next?"},{"location":"usage-guide/configuration/","text":"Configuration hyper-bump-it is configured using a file in the TOML format . The default name for this file is hyper-bump-it.toml and it is expected to be in the root directory of the project. The command line interface (CLI) allows specifying an alternate path for this file. pyproject.toml Support For Python projects, pyproject.toml is a standard file that can contain configuration information for multiple different tools. hyper-bump-it also supports reading the configuration from this file. This will only be checked for if hyper-bump-it.toml is not found and the CLI did not specify an alternate path. Configuration File All configuration sections are rooted under the hyper-bump-it table. Most settings have reasonable defaults, so the following is a functional configuration. pyproject.toml Support When using pyproject.toml , configuration sections are rooted under the tool.hyper-bump-it table instead of simply hyper-bump-it . hyper-bump-it.toml pyproject.toml [hyper-bump-it] current_version = \"1.2.3\" [[hyper-bump-it.files]] file_glob = \"*.txt\" [tool.hyper-bump-it] current_version = \"1.2.3\" [[tool.hyper-bump-it.files]] file_glob = \"*.txt\" Top Level Table There are a few fields that can be specified as part of the top level table. The most common is the current_version field, which contains the current version. How this is used and the alternative option are discussed in a latter section . The other optional field is show_confirm_prompt . If this field is not specified (default) or set to true , hyper-bump-it will prompt the user to confirm the changes described in the execution plan before performing the actions. When set to false , the prompt will not be displayed. Instead, the actions will be immediately performed. The following is an example configuration which disables the confirmation prompt. hyper-bump-it.toml pyproject.toml [hyper-bump-it] current_version = \"1.2.3\" show_confirm_prompt = false [[hyper-bump-it.files]] file_glob = \"*.txt\" [tool.hyper-bump-it] current_version = \"1.2.3\" show_confirm_prompt = false [[tool.hyper-bump-it.files]] file_glob = \"*.txt\" Files The most important part of the configuration is the list of file definitions. This is how hyper-bump-it knows which files should be updated and how that update process should operate. There must be at least one file definition. The only field that each file definition is required to have is that file_glob field. This tells hyper-bump-it which files should be updated. This can be an explicit file name, but glob patterns are also supported. Using a glob pattern allows for a single file definition to be used to specify how multiple files should be updated. These file paths should be relative to the project root. In addition, search_format_pattern and replace_format_pattern fields can be included in a file definition. The search_format_pattern specifies the text to look for in each file matched by file_glob . While the replace_format_pattern specifies the text to write back to the file in place of the text that was searched for. There is a dedicated page that discusses format patterns in more detail. If search_format_pattern is not specified, the default value of \"{version}\" is used. If replace_format_pattern is not specified, the value of search_format_pattern is used. There is an additional optional field named keystone , this is discussed in a latter section . The following is an example configuration which has two file definitions that both customize the search_format_pattern . hyper-bump-it.toml pyproject.toml [hyper-bump-it] current_version = \"1.2.3\" [[hyper-bump-it.files]] file_glob = \"*.txt\" search_format_pattern = \"version={version}\" [[hyper-bump-it.files]] file_glob = \"index.md\" search_format_pattern = \"My Project - {major}.{minor}\" [tool.hyper-bump-it] current_version = \"1.2.3\" [[tool.hyper-bump-it.files]] file_glob = \"*.txt\" search_format_pattern = \"version={version}\" [[tool.hyper-bump-it.files]] file_glob = \"index.md\" search_format_pattern = \"My Project - {major}.{minor}\" Git The git integration is configured within the dedicated sub-tables, but they are completely optional. There are three types of git actions that can be performed: commit , branch , and tag . Each of these fields can have one of three values: \"skip\" , \"create\" , or \"create-and-push\" . There is a dedicated section that discusses these git actions in more detail. To ensure changes are not accidentally published, none of the fields default to \"create-and-push\" . If commit is not specified, the default value of \"create\" is used. If brnach is not specified, the default value of \"skip\" is used. If tag is not specified, the default value of \"skip\" is used. Additionally, there are a few fields that can be used to customize how these actions operate. remote specifies the name of remote repository to use as the destination for push operations. If not specified, the default value of \"origin\" is used. commit_format_pattern is a format pattern used to produce the message for the commit. If not specified, the default value of \"Bump version: {current_version} \u2192 {new_version}\" is used. branch_format_pattern is a format pattern used to produce the name of the branch. If not specified, the default value of, the default value of \"bump_version_to_{new_version}\" is used. tag_format_pattern is a format pattern used to produce the name of the tag. If not specified, the default value of, the default value of \"v{new_version}\" is used. The following is an example configuration which creates a commit on a new branch that is pushed to the \"upstream\" remote. Additionally, the format patterns for the commit message and branch names are customized. hyper-bump-it.toml pyproject.toml [hyper-bump-it] current_version = \"1.2.3\" [hyper-bump-it.git] remote = \"upstream\" commit_format_pattern = \"Bump version to {new_version}\" branch_format_pattern = \"bump_to_{new_version}\" [hyper-bump-it.git.actions] commit = \"create-and-push\" branch = \"create-and-push\" [[hyper-bump-it.files]] file_glob = \"*.txt\" [tool.hyper-bump-it] current_version = \"1.2.3\" [tool.hyper-bump-it.git] remote = \"upstream\" commit_format_pattern = \"Bump version to {new_version}\" branch_format_pattern = \"bump_to_{new_version}\" [tool.hyper-bump-it.git.actions] commit = \"create-and-push\" branch = \"create-and-push\" [[tool.hyper-bump-it.files]] file_glob = \"*.txt\" Current Version By default, the current version is explicitly recorded in the configuration file using the current_version field. As a result, this means that each time hyper-bump-it is used to change the version number, that configuration file will also change. For some, this behavior might not be desirable. Most projects already have a that acts as the authoritative source for the software version when the release artifact is generated. hyper-bump-it allows projects to indicate this file with the keystone setting as part of a file table. The following is an example configuration has a single file definitions, which is a keystone file. Default values are used for all other fields. hyper-bump-it.toml pyproject.toml [[hyper-bump-it.files]] file_glob = \"version.txt\" keystone = true [[tool.hyper-bump-it.files]] file_glob = \"version.txt\" keystone = true Note Since current_version is not used when using a keystone file, the top level table can be omitted. The search_format_pattern will be used to parse the specified file to discover the current version. With this functionality enabled, there are a few restrictions: The configuration file must not specify the current_version field. Specifying a glob pattern instead of an explicit file name for file_glob is still supported. However, it must only match a single file. The search_format_pattern can contain any of the supported keys . However, it is important to understand how the pattern is processed .","title":"Configuration"},{"location":"usage-guide/configuration/#configuration","text":"hyper-bump-it is configured using a file in the TOML format . The default name for this file is hyper-bump-it.toml and it is expected to be in the root directory of the project. The command line interface (CLI) allows specifying an alternate path for this file. pyproject.toml Support For Python projects, pyproject.toml is a standard file that can contain configuration information for multiple different tools. hyper-bump-it also supports reading the configuration from this file. This will only be checked for if hyper-bump-it.toml is not found and the CLI did not specify an alternate path.","title":"Configuration"},{"location":"usage-guide/configuration/#configuration-file","text":"All configuration sections are rooted under the hyper-bump-it table. Most settings have reasonable defaults, so the following is a functional configuration. pyproject.toml Support When using pyproject.toml , configuration sections are rooted under the tool.hyper-bump-it table instead of simply hyper-bump-it . hyper-bump-it.toml pyproject.toml [hyper-bump-it] current_version = \"1.2.3\" [[hyper-bump-it.files]] file_glob = \"*.txt\" [tool.hyper-bump-it] current_version = \"1.2.3\" [[tool.hyper-bump-it.files]] file_glob = \"*.txt\"","title":"Configuration File"},{"location":"usage-guide/configuration/#top-level-table","text":"There are a few fields that can be specified as part of the top level table. The most common is the current_version field, which contains the current version. How this is used and the alternative option are discussed in a latter section . The other optional field is show_confirm_prompt . If this field is not specified (default) or set to true , hyper-bump-it will prompt the user to confirm the changes described in the execution plan before performing the actions. When set to false , the prompt will not be displayed. Instead, the actions will be immediately performed. The following is an example configuration which disables the confirmation prompt. hyper-bump-it.toml pyproject.toml [hyper-bump-it] current_version = \"1.2.3\" show_confirm_prompt = false [[hyper-bump-it.files]] file_glob = \"*.txt\" [tool.hyper-bump-it] current_version = \"1.2.3\" show_confirm_prompt = false [[tool.hyper-bump-it.files]] file_glob = \"*.txt\"","title":"Top Level Table"},{"location":"usage-guide/configuration/#files","text":"The most important part of the configuration is the list of file definitions. This is how hyper-bump-it knows which files should be updated and how that update process should operate. There must be at least one file definition. The only field that each file definition is required to have is that file_glob field. This tells hyper-bump-it which files should be updated. This can be an explicit file name, but glob patterns are also supported. Using a glob pattern allows for a single file definition to be used to specify how multiple files should be updated. These file paths should be relative to the project root. In addition, search_format_pattern and replace_format_pattern fields can be included in a file definition. The search_format_pattern specifies the text to look for in each file matched by file_glob . While the replace_format_pattern specifies the text to write back to the file in place of the text that was searched for. There is a dedicated page that discusses format patterns in more detail. If search_format_pattern is not specified, the default value of \"{version}\" is used. If replace_format_pattern is not specified, the value of search_format_pattern is used. There is an additional optional field named keystone , this is discussed in a latter section . The following is an example configuration which has two file definitions that both customize the search_format_pattern . hyper-bump-it.toml pyproject.toml [hyper-bump-it] current_version = \"1.2.3\" [[hyper-bump-it.files]] file_glob = \"*.txt\" search_format_pattern = \"version={version}\" [[hyper-bump-it.files]] file_glob = \"index.md\" search_format_pattern = \"My Project - {major}.{minor}\" [tool.hyper-bump-it] current_version = \"1.2.3\" [[tool.hyper-bump-it.files]] file_glob = \"*.txt\" search_format_pattern = \"version={version}\" [[tool.hyper-bump-it.files]] file_glob = \"index.md\" search_format_pattern = \"My Project - {major}.{minor}\"","title":"Files"},{"location":"usage-guide/configuration/#git","text":"The git integration is configured within the dedicated sub-tables, but they are completely optional. There are three types of git actions that can be performed: commit , branch , and tag . Each of these fields can have one of three values: \"skip\" , \"create\" , or \"create-and-push\" . There is a dedicated section that discusses these git actions in more detail. To ensure changes are not accidentally published, none of the fields default to \"create-and-push\" . If commit is not specified, the default value of \"create\" is used. If brnach is not specified, the default value of \"skip\" is used. If tag is not specified, the default value of \"skip\" is used. Additionally, there are a few fields that can be used to customize how these actions operate. remote specifies the name of remote repository to use as the destination for push operations. If not specified, the default value of \"origin\" is used. commit_format_pattern is a format pattern used to produce the message for the commit. If not specified, the default value of \"Bump version: {current_version} \u2192 {new_version}\" is used. branch_format_pattern is a format pattern used to produce the name of the branch. If not specified, the default value of, the default value of \"bump_version_to_{new_version}\" is used. tag_format_pattern is a format pattern used to produce the name of the tag. If not specified, the default value of, the default value of \"v{new_version}\" is used. The following is an example configuration which creates a commit on a new branch that is pushed to the \"upstream\" remote. Additionally, the format patterns for the commit message and branch names are customized. hyper-bump-it.toml pyproject.toml [hyper-bump-it] current_version = \"1.2.3\" [hyper-bump-it.git] remote = \"upstream\" commit_format_pattern = \"Bump version to {new_version}\" branch_format_pattern = \"bump_to_{new_version}\" [hyper-bump-it.git.actions] commit = \"create-and-push\" branch = \"create-and-push\" [[hyper-bump-it.files]] file_glob = \"*.txt\" [tool.hyper-bump-it] current_version = \"1.2.3\" [tool.hyper-bump-it.git] remote = \"upstream\" commit_format_pattern = \"Bump version to {new_version}\" branch_format_pattern = \"bump_to_{new_version}\" [tool.hyper-bump-it.git.actions] commit = \"create-and-push\" branch = \"create-and-push\" [[tool.hyper-bump-it.files]] file_glob = \"*.txt\"","title":"Git"},{"location":"usage-guide/configuration/#current-version","text":"By default, the current version is explicitly recorded in the configuration file using the current_version field. As a result, this means that each time hyper-bump-it is used to change the version number, that configuration file will also change. For some, this behavior might not be desirable. Most projects already have a that acts as the authoritative source for the software version when the release artifact is generated. hyper-bump-it allows projects to indicate this file with the keystone setting as part of a file table. The following is an example configuration has a single file definitions, which is a keystone file. Default values are used for all other fields. hyper-bump-it.toml pyproject.toml [[hyper-bump-it.files]] file_glob = \"version.txt\" keystone = true [[tool.hyper-bump-it.files]] file_glob = \"version.txt\" keystone = true Note Since current_version is not used when using a keystone file, the top level table can be omitted. The search_format_pattern will be used to parse the specified file to discover the current version. With this functionality enabled, there are a few restrictions: The configuration file must not specify the current_version field. Specifying a glob pattern instead of an explicit file name for file_glob is still supported. However, it must only match a single file. The search_format_pattern can contain any of the supported keys . However, it is important to understand how the pattern is processed .","title":"Current Version"},{"location":"usage-guide/format-patterns/","text":"Format Patterns A format pattern is a string provided to hyper-bump-it that goes through a text formatting process before it is used. This is done using Python's format string syntax . While the link covers the full syntax, the key point is that values are referenced by enclosing the name in curly braces (positional references are not supported). Text outside the curly braces will be left unaltered. If you need to include a brace character in the text, it can be escaped by doubling the brace character ( {{ or }} ). As a basic example, if the current version is 1.2.3 and the new version is 4.5.6 \"From {current_version} to {new_major}.{new_minor} {{new_major}}\" would become \"From 1.2.3 to 4.5 {new_major}\" Supported Keys Version Keys Name Description Type current_version Full current version Version 1 current_major Major part of current version int current_minor Minor part of current version int current_patch Patch part of current version int current_prerelease Pre-release part of current version 2 str current_build Build part of current version 2 str new_version Full new version Version 1 new_major Major part of new version int new_minor Minor part of new version int new_patch Patch part of new version int new_prerelease Pre-release part of new version 2 str new_build Build part of new version 2 str General Context Keys When a format pattern is being used as a search or replacement pattern, there are an additional set of keys that may be used. Depending on the context, each key acts as an alias for one of the keys listed above. Name Alias For (Search) Alias For (Replace) version current_version new_version major current_major new_major minor current_minor new_minor patch current_patch new_patch prerelease current_prerelease new_prerelease build current_build new_build As a basic example, if the current version is 1.2.3 and the new version is 4.5.6 and the format pattern is \"version='{version}'\" . When used as a search pattern it would become \"version='1.2.3'\" But when used as a replacement pattern it would become \"version='4.5.6'\" It is very common that the only differences between the search and replacement format patterns is which version value they are referencing. These general context keys can be used for these cases to reduce duplication in the configuration. (See File Configuration ) Helper Keys So far, all the supported keys have been directly related to the version information for a specific execution. However, hyper-bump-it is not limited to those type of values. The following are also supported. Name Description Type today Current date datetime.date 3 Keystone File Considerations When utilizing the keystone file functionality , hyper-bump-it converts the search format pattern into a regular expression that can be used to parse the current version from the file. Key Precedence General context keys take precedence over the explicit version keys. As an example, if the search format string was \"{version} - {current_version}\" , only version would be used. If the search format string contains version or current_version , no other keys will be used. Limitations This conversion process imposes limitations on the search format pattern that can be used for a keystone file. The most basic limitation is that if the search format pattern does not contain version or current_version , the format pattern must contain keys to capture the major, minor and patch part of the version. Before getting into the specifics, format patterns that only use basic name only references (as demonstrated earlier on this page) are fully supported . Attribute access and element indexes are not supported. Conversion flags are ignored. Format specifications are only supported for today . Furthermore, the only supported specifications are the date specific format code . Within that set, codes that are dependent on the machine's locale are not supported. Version is equivalent to @dataclass class Version : major : int minor : int patch : int prerelease : tuple [ str , ... ] build : tuple [ str , ... ] \u21a9 \u21a9 A period delimited string of each part of the value. If the version does not contain this value, the result will be an empty string. \u21a9 \u21a9 \u21a9 \u21a9 The date type supports defaults to the form of YYYY-MM-DD . This can be customized using formatting codes . \u21a9","title":"Format Patterns"},{"location":"usage-guide/format-patterns/#format-patterns","text":"A format pattern is a string provided to hyper-bump-it that goes through a text formatting process before it is used. This is done using Python's format string syntax . While the link covers the full syntax, the key point is that values are referenced by enclosing the name in curly braces (positional references are not supported). Text outside the curly braces will be left unaltered. If you need to include a brace character in the text, it can be escaped by doubling the brace character ( {{ or }} ). As a basic example, if the current version is 1.2.3 and the new version is 4.5.6 \"From {current_version} to {new_major}.{new_minor} {{new_major}}\" would become \"From 1.2.3 to 4.5 {new_major}\"","title":"Format Patterns"},{"location":"usage-guide/format-patterns/#supported-keys","text":"","title":"Supported Keys"},{"location":"usage-guide/format-patterns/#version-keys","text":"Name Description Type current_version Full current version Version 1 current_major Major part of current version int current_minor Minor part of current version int current_patch Patch part of current version int current_prerelease Pre-release part of current version 2 str current_build Build part of current version 2 str new_version Full new version Version 1 new_major Major part of new version int new_minor Minor part of new version int new_patch Patch part of new version int new_prerelease Pre-release part of new version 2 str new_build Build part of new version 2 str","title":"Version Keys"},{"location":"usage-guide/format-patterns/#general-context-keys","text":"When a format pattern is being used as a search or replacement pattern, there are an additional set of keys that may be used. Depending on the context, each key acts as an alias for one of the keys listed above. Name Alias For (Search) Alias For (Replace) version current_version new_version major current_major new_major minor current_minor new_minor patch current_patch new_patch prerelease current_prerelease new_prerelease build current_build new_build As a basic example, if the current version is 1.2.3 and the new version is 4.5.6 and the format pattern is \"version='{version}'\" . When used as a search pattern it would become \"version='1.2.3'\" But when used as a replacement pattern it would become \"version='4.5.6'\" It is very common that the only differences between the search and replacement format patterns is which version value they are referencing. These general context keys can be used for these cases to reduce duplication in the configuration. (See File Configuration )","title":"General Context Keys"},{"location":"usage-guide/format-patterns/#helper-keys","text":"So far, all the supported keys have been directly related to the version information for a specific execution. However, hyper-bump-it is not limited to those type of values. The following are also supported. Name Description Type today Current date datetime.date 3","title":"Helper Keys"},{"location":"usage-guide/format-patterns/#keystone-file-considerations","text":"When utilizing the keystone file functionality , hyper-bump-it converts the search format pattern into a regular expression that can be used to parse the current version from the file.","title":"Keystone File Considerations"},{"location":"usage-guide/format-patterns/#key-precedence","text":"General context keys take precedence over the explicit version keys. As an example, if the search format string was \"{version} - {current_version}\" , only version would be used. If the search format string contains version or current_version , no other keys will be used.","title":"Key Precedence"},{"location":"usage-guide/format-patterns/#limitations","text":"This conversion process imposes limitations on the search format pattern that can be used for a keystone file. The most basic limitation is that if the search format pattern does not contain version or current_version , the format pattern must contain keys to capture the major, minor and patch part of the version. Before getting into the specifics, format patterns that only use basic name only references (as demonstrated earlier on this page) are fully supported . Attribute access and element indexes are not supported. Conversion flags are ignored. Format specifications are only supported for today . Furthermore, the only supported specifications are the date specific format code . Within that set, codes that are dependent on the machine's locale are not supported. Version is equivalent to @dataclass class Version : major : int minor : int patch : int prerelease : tuple [ str , ... ] build : tuple [ str , ... ] \u21a9 \u21a9 A period delimited string of each part of the value. If the version does not contain this value, the result will be an empty string. \u21a9 \u21a9 \u21a9 \u21a9 The date type supports defaults to the form of YYYY-MM-DD . This can be customized using formatting codes . \u21a9","title":"Limitations"},{"location":"usage-guide/git-integration/","text":"Git Integration In addition to updating a specified set of files, hyper-bump-it can interact with the projects version control system. This functionality will automate some of the action that would need to be performed manually after updating files. Requirements hyper-bump-it depends on the git executable to be installed and available on the system path. ( GitPython is used under the covers to interact with git ). The local checkout of the project is expected to have the .git/ directory at the same level as the project root. Tip These requirements are only enforced when hyper-bump-it is configured to perform git actions. When all of the actions are set to \"skip\" , the git funcitonality will not be initialized. Actions There are three types of git actions that can be performed: commit, branch, and tag. The commit action is the most basic. It is the process of creating a new commit that contains the files that were updated by hyper-bump-it . The branch action can be used to augment the commit action. When used, a new branch is created and the new commit is added to that new branch instead of the branch that was active when hyper-bump-it started executing. The tag action can be used to as a step following the commit action. When used, it creates a new tag that points to the new commit. Valid action states Each of the git operations can be configured to be \"skip\" , \"create\" , or \"create-ane-push\" . However, many of the combinations that are possible are not allowed because they would require a result that is not possible. There are a few basic rules: If the files are being edited without creating a commit (commit action is set to \"skip\" ), branch and tag must also be set to \"skip\" . If a commit is being created, but not pushed (commit action is set to \"create\" ), branch and tag must not be set to \"create-and-push\" . If a commit is being created & pushed (commit action is set to \"create-and-push\" ), branch must not be set to \"create\" .","title":"Git Integration"},{"location":"usage-guide/git-integration/#git-integration","text":"In addition to updating a specified set of files, hyper-bump-it can interact with the projects version control system. This functionality will automate some of the action that would need to be performed manually after updating files.","title":"Git Integration"},{"location":"usage-guide/git-integration/#requirements","text":"hyper-bump-it depends on the git executable to be installed and available on the system path. ( GitPython is used under the covers to interact with git ). The local checkout of the project is expected to have the .git/ directory at the same level as the project root. Tip These requirements are only enforced when hyper-bump-it is configured to perform git actions. When all of the actions are set to \"skip\" , the git funcitonality will not be initialized.","title":"Requirements"},{"location":"usage-guide/git-integration/#actions","text":"There are three types of git actions that can be performed: commit, branch, and tag. The commit action is the most basic. It is the process of creating a new commit that contains the files that were updated by hyper-bump-it . The branch action can be used to augment the commit action. When used, a new branch is created and the new commit is added to that new branch instead of the branch that was active when hyper-bump-it started executing. The tag action can be used to as a step following the commit action. When used, it creates a new tag that points to the new commit.","title":"Actions"},{"location":"usage-guide/git-integration/#valid-action-states","text":"Each of the git operations can be configured to be \"skip\" , \"create\" , or \"create-ane-push\" . However, many of the combinations that are possible are not allowed because they would require a result that is not possible. There are a few basic rules: If the files are being edited without creating a commit (commit action is set to \"skip\" ), branch and tag must also be set to \"skip\" . If a commit is being created, but not pushed (commit action is set to \"create\" ), branch and tag must not be set to \"create-and-push\" . If a commit is being created & pushed (commit action is set to \"create-and-push\" ), branch must not be set to \"create\" .","title":"Valid action states"}]}